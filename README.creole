=pg8000

This is an experimental version of PG8000 which implements some suggestions
for [[https://wiki.python.org/moin/DbApi3|DB-API 3]]. The differences from
DBAPI 2.0 are:

* The 'paramstyle' property is removed, and parameter labels are either :1 if
    the arguments are a sequence, or :name if the arguments are a mapping.
* The 'threadsafety' module parameter is removed. The thread safety level is
    always that connections can't be shared between threads, but the module can.
* Introduce explicit prepared statements.
* An iterable cursor is part of the core DB-API specification, so no warning is
    given when using it.
* The cursor's execute() method returns 'self', so you can iterate over the
  result of an execute().
* The cursor's setinputsizes() and setoutputsizes() are removed.
* The cursor's arraysize property is removed.

{{{

>>> import pg8000
>>>
>>> conn = pg8000.connect(user='postgres', password='password')
>>> ps = conn.execute("create temporary table emps (id int, name varchar)")
>>> conn.execute("insert into emps values (1, 'Camilla')").rowcount
1
>>> conn.commit()
>>> for row in conn.execute("select * from emps where id = :1", (1,)):
...     print(row)
[1, 'Camilla']
>>>
>>> for row in conn.execute(
...         "select * from emps where name = :name", {'name': 'Camilla'}):
...     print(row)
[1, 'Camilla']
>>> conn.commit()

}}}

PG8000 is a pure-[[http://www.python.org/|Python]]
[[http://www.postgresql.org/|PostgreSQL]] driver that complies with
[[http://www.python.org/dev/peps/pep-0249/|DB-API 2.0]]. The driver
communicates with the database using the
[[http://www.postgresql.org/docs/9.1/static/protocol.html|PostgreSQL Backend / Frontend Protocol]].

For more information, please see the
[[https://pypi.python.org/pypi/pg8000|documentation]].
=======
* CPython 2.5
* CPython 2.6
* CPython 2.7
* CPython 3.2
* CPython 3.3
* PyPy
* Jython 2.5

==Usage

{{{

>>> from pg8000 import connect
>>> conn = connect(user='postgres', password='password')

}}}

The {{{connect}}} function takes the following parameters:

|=parameter    |=default |
|user          |         |
|host          |localhost|
|unix_sock     |         |
|port          |5432     |
|database      |         |
|password      |         |
|socket_timeout|60       |
|ssl           |False    |

{{{

>>> ps = conn.execute("create temporary table example (id int, name varchar)")
>>> conn.execute("insert into example values (1, 'hello')").rowcount
1
>>> conn.commit()
>>> for row in conn.execute("select * from example where id = :1", (1,)):
...     print(row)
[1, 'hello']
>>> conn.commit()

}}}

Following the DB-API specification, autocommit is off by default. It can be
turned on by using the {{{autocommit}}} property of the connection.

{{{

>>> conn.autocommit = True
>>> ps = conn.execute("vacuum")
>>> conn.autocommit = False

}}}

=Regression Tests

To run the regression tests, install [[http://testrun.org/tox/latest/|tox]]:

{{{
pip install tox
}}}

then add install all the supported Python versions, and add a line to pg_hba.conf requiring md5 for the database pg8000_md5, eg.

{{{
host    pg8000_md5      all             127.0.0.1/32            md5
}}}

and run {{{tox}}} from the {{{pg8000}}} directory:

{{{
tox
}}}

The pg8000.tests.tests_1_8 package are a copy of the tests from the 1.8 release
and are kept to make sure we retain backward compatibility with it. It will
probably be removed in a 2.0 release.

==Performance Tests

To run the performance tests from the {{{pg8000}}} directory:

{{{
python -m pg8000.tests.performance
}}}

=Building The Documentation

The docs are written using [[http://sphinx-doc.org/|Sphinx]]. To build them,
install sphinx:

{{{
pip install sphinx
}}}

Then in the {{{doc}}} directory type:

{{{
make html
}}}
